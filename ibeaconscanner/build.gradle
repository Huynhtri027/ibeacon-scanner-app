apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'

def projectVersionCodeNr = Integer.parseInt(projectVersionCode);
def projectGit = projectGit;
def projectUrl = projectUrl;
def projectDescription = projectDescription
def libGroupId = libGroupId;
def libArtifactId = libArtifactId;

group = libGroupId
version = projectVersion

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode projectVersionCodeNr
        versionName projectVersion
        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'long', 'BEACON_EXIT_TIME_IN_MILLIS', '20L * 1000L'
        buildConfigField 'long', 'ADD_BEACON_TIMEOUT_IN_MILLIS', '375L'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:support-annotations:25.0.0'

    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

configurations {
    deployerJars
}

install {
    repositories.mavenInstaller {
        pom.project {
            name libArtifactId
            description projectDescription
            url projectUrl
            inceptionYear '2016'

            packaging 'aar'
            groupId libGroupId
            artifactId libArtifactId
            version projectVersion

            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/inthepocket/ibeacon-scanner-android/blob/master/LICENSE.md'
                }
            }
        }
    }
}

bintray() {
    user = hasProperty('bintray_user') ? bintray_user : System.getenv('bintray_user')
    key = hasProperty('bintray_apikey') ? bintray_apikey : System.getenv('bintray_apikey')
    pkg {
        repo = libGroupId
        name = libArtifactId
        userOrg = hasProperty('bintray_user') ? bintray_user : System.getenv('bintray_user')
        licenses = ['MIT']
        vcsUrl = projectGit
        version {
            name = projectVersion
            gpg {
                sign = true
                passphrase = hasProperty('bintray_gpg_phrase') ? bintray_gpg_phrase : System.getenv('bintray_gpg_phrase')
            }
        }
    }
    configurations = ['archives']
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.junit.reportsPath", "build/test-results/debug/" // path to junit reports
        property "sonar.android.lint.report", "build/outputs/lint-results-debug.xml" // path to lint reports
    }
}
